---

  - name: Generate server private key
    local_action:
      module: openssl_privatekey
      path: "{{cert_dir}}/{{tls_server_key}}"
      size: "{{tls_server_key_size}}"
    run_once: true
    when: generate_server_cert  
  
  - name: Generate CSR and key for server cert
    local_action:
      module: |
        shell if [ ! -e {{cert_dir}}/{{tls_server_csr}} ]
        then
        openssl req -newkey rsa:{{tls_server_key_size}} -nodes -subj "/CN={{tls_server_commonname}}" \
        -keyout "{{cert_dir}}/{{tls_server_key}}.key" -out "{{cert_dir}}/{{tls_server_csr}}"
        fi
    args:
      executable: /bin/bash
    ignore_errors: true
    run_once: true
    when: generate_server_cert

  - name: Add required extension for server authentication
    local_action:
      module: >
        shell echo extendedKeyUsage = serverAuth >> {{cert_dir}}/{{tls_server_extfile}}
    ignore_errors: true
    run_once: true
    when: generate_server_cert

  - name: Sign server cert request by CA
    local_action:
      module: |
        shell if [ ! -e {{cert_dir}}/{{tls_server_cert}} ]
        then
        openssl x509 -req -sha256 -days {{tls_server_valid_days}} \
        -CA "{{cert_dir}}/{{tls_ca_cert}}" -CAkey "{{cert_dir}}/{{tls_ca_key}}" -set_serial {{ 999999999 | random }} \
        -in "{{cert_dir}}/{{tls_server_csr}}" -out {{cert_dir}}/{{tls_server_cert}} -extfile {{cert_dir}}/{{tls_server_extfile}}
        
        fi
    args:
      executable: /bin/bash
    ignore_errors: true
    when: generate_server_cert
